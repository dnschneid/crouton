#!/bin/sh -e
# Copyright (c) 2015 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Monitors keyboard events for the crouton switch command.

. "`dirname "$0"`/../installer/functions"

# hexdump output format variables
if getconf LONG_BIT | grep -q 32; then
    HEXDUMP_FMT='2/4 "%u 0 " " " 2/2 "%u " " " 1/4 "%u " "\n"'
else
    HEXDUMP_FMT='4/4 "%u " " " 2/2 "%u " " " 1/4 "%u " "\n"'
fi
SECONDS_LO='$1'
SECONDS_HI='$2'
USECONDS_LO='$3'
USECONDS_HI='$4'
TYPE='$5'
KEY='$6'
STATE='$7'

# constants
TYPE_EV_KEY=1
STATE_DOWN=1
STATE_UP=0
KEY_LEFTCTRL=29
KEY_LEFTALT=56
KEY_LEFTSHIFT=42
KEY_RIGHTCTRL=97
KEY_RIGHTALT=100
KEY_RIGHTSHIFT=54
KEY_F1=59
KEY_F2=60

EVENT_DEV_POLL=15

# Only one at a time. xbindkeys lockfile is for legacy compatibility
mkdir -m 775 -p "$CROUTONLOCKDIR"
exec 3>>"$CROUTONLOCKDIR/xbindkeys"
if ! flock -n 3; then
    echo "Another instance of ${0##*/} running, waiting..."
    flock 3
fi

# Reset event variables to handle strange environments
unset `set | grep -o '^event[0-9]*'` 2>/dev/null || true

# Poll for new event files and dump the output
while :; do
    # Clean up old hexdumps and start new ones
    for event in `set | grep -o '^event[0-9]*'` /dev/input/event*; do
        # Check if the event file is already monitored
        eval "pid=\"\${${event##*/}:-0}\""
        if [ "$pid" != 0 ]; then
            # Check if it's still running
            if kill -0 "$pid" 2>/dev/null; then
                continue
            fi
            wait "$pid" || true
        fi
        # Clean up old variables
        if [ "${event#/}" = "$event" ]; then
            unset "$event"
        else
            # Read in the event files and split into input_event fields
            stdbuf -oL hexdump -e "$HEXDUMP_FMT" "$event" &
            eval "${event##*/}='$!'"
        fi
    done
    # Avoid picking up the event variable
    unset event
    # Kill all event daemons
    pids="`set | sed -n 's/^event[0-9]*=.\(.*\).$/\1/p' | tr '\n' ' '`"
    settrap "kill $pids 2>/dev/null;"
    # Wait for next poll
    sleep "$EVENT_DEV_POLL"
done | unbuffered_awk "
    function update() {
        c = lc || rc; s = ls || rs; a = la || ra
        if (!cmd && c && s && a && p) {
            cmd = \"p\"
        } else if (!cmd && c && s && a && n) {
            cmd = \"n\"
        } else if (cmd && !c && !s && !a && !p && !n) {
            system(\"/usr/local/bin/croutoncycle \" cmd)
            cmd = \"\"
        }
    }
    $TYPE == $TYPE_EV_KEY && $KEY == $KEY_LEFTCTRL   { lc = $STATE; update() }
    $TYPE == $TYPE_EV_KEY && $KEY == $KEY_LEFTSHIFT  { ls = $STATE; update() }
    $TYPE == $TYPE_EV_KEY && $KEY == $KEY_LEFTALT    { la = $STATE; update() }
    $TYPE == $TYPE_EV_KEY && $KEY == $KEY_RIGHTCTRL  { rc = $STATE; update() }
    $TYPE == $TYPE_EV_KEY && $KEY == $KEY_RIGHTSHIFT { rs = $STATE; update() }
    $TYPE == $TYPE_EV_KEY && $KEY == $KEY_RIGHTALT   { ra = $STATE; update() }
    $TYPE == $TYPE_EV_KEY && $KEY == $KEY_F1         {  p = $STATE; update() }
    $TYPE == $TYPE_EV_KEY && $KEY == $KEY_F2         {  n = $STATE; update() }
"
