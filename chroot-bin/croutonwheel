#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Default button numbers
u=4
d=5
l=6
r=7
# Do horizontal scrolling by default
x=1
# Set the default scaling and constant values
xs='0.2'
xc='0.01'
ys='0.2'
yc='0.05'

#
USAGE="${0##*/} [-x] [-r] [-a #.#] [-b #.#] [-c #.#] [-d #.#]
Runs the mousewheel daemon.
Options:
    -r Reverse the direction of scrolling.
    -x Disable horizontal scrolling.
    -a Sets the X scrolling scaling factor (default: $xs).
    -b Sets the X scrolling constant additive (default: $xc).
    -c Sets the Y scrolling scaling factor (default: $ys).
    -d Sets the Y scrolling constant additive (default: $yc)."

# Process options
while getopts 'a:b:c:d:rx' opt; do
    case "$opt" in
        a) xs="$OPTARG";;
        b) xc="$OPTARG";;
        c) ys="$OPTARG";;
        d) yc="$OPTARG";;
        r) z=$u; u=$d; d=$z; z=$l; l=$r; r=$z;;
        x) x='0';;
        \?) echo "$USAGE" 1>&2; exit 1;;
    esac
done
if [ $# -ge "$OPTIND" ]; then
    echo "$USAGE" 1>&2
    exit 1;
fi

# Operate on the Chromium OS X11 server
eval "`/usr/local/bin/host-x11`"

# Get the aura root window number (hex)
aura="`xwininfo -root -children | mawk '/aura_root/ {print $1}'`"

# Monitor xinput2 events, reacting only to scroll events (axes 2 and 3).
# Accumulate the x and y scrolls, but reduce the acceleration so it doesn't go
# crazy. After a threshold, simulate the wheel presses using xte.
# Use xev to detect window changes and disable mouse wheel events when aura is
# focused.
# The goal of this system is to avoid having to launch any processes on a
# per-event basis, both to improve latency and performance as well as handle the
# case where this script outlives the chroot.
{
    croutonxi2event <&- &
    xi="$!"
    xev -root <&- &
    trap "kill $! $xi 2>&- || true" INT TERM HUP 0
    wait
} <&- | mawk -W interactive '
    # Test if x is a non-zero real number (i.e. not nan, inf, or 0)
    # (x+0 != x+1) tests if the number is not nan or inf.
    function isnonzero(x) {
        return (x+0 != x+1) && (x != 0)
    }

    m {
        if ($4 == "'"$aura"',") {
            if (m == "MapNotify") {
                w = 1
                x = 0
                y = 0
            } else {
                w = 0
            }
        }
        m = ""
    }
    /^U?n?[Mm]apNotify/ {
        m = $1
    }

    !w && /^EVENT type 17/ {
        # Valuators start at $10
        if (isnonzero($19) || isnonzero($22)) {
            dx = $14
            dy = $15
            tp = 1
        } else {
            dx = $12
            dy = $13
            tp = 0
        }
        if ('"$x"' && isnonzero(dx)) {
            if (dx > 0) {
                if (x < 0) x = 0
                x += tp ? log(dx) * '"$xs"' + '"$xc"' : 1
            } else {
                if (x > 0) x = 0
                x -= tp ? log(-dx) * '"$xs"' + '"$xc"' : 1
            }
            while (x >= 1) {
                print "mouseclick '"$r"'"
                x -= 1
            }
            while (x <= -1) {
                print "mouseclick '"$l"'"
                x += 1
            }
        }
        if (isnonzero(dy)) {
            if (dy > 0) {
                if (y < 0) y = 0
                y += tp ? log(dy) * '"$ys"' + '"$yc"' : 1
            } else {
                if (y > 0) y = 0
                y -= tp ? log(-dy) * '"$ys"' + '"$yc"' : 1
            }
            while (y >= 1) {
                print "mouseclick '"$d"'"
                y -= 1
            }
            while (y <= -1) {
                print "mouseclick '"$u"'"
                y += 1
            }
        }
    }
' | xte &
trap "pkill -P $$ 2>&- || true" INT TERM HUP 0
wait
exit 0
