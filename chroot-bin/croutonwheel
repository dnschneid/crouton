#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Default button numbers
u=4
d=5
l=6
r=7
# Do horizontal scrolling by default
x=1
# Set the default scaling and constant values
xs='0.2'
xc='0.01'
ys='0.2'
yc='0.05'

#
USAGE="${0##*/} [-x] [-r] [-a #.#] [-b #.#] [-c #.#] [-d #.#]
Runs the mousewheel daemon.
Options:
    -r Reverse the direction of scrolling.
    -x Disable horizontal scrolling.
    -a Sets the X scrolling scaling factor (default: $xs).
    -b Sets the X scrolling constant additive (default: $xc).
    -c Sets the Y scrolling scaling factor (default: $ys).
    -d Sets the Y scrolling constant additive (default: $yc)."

# Process options
while getopts 'a:b:c:d:rx' opt; do
    case "$opt" in
        a) xs="$OPTARG";;
        b) xc="$OPTARG";;
        c) ys="$OPTARG";;
        d) yc="$OPTARG";;
        r) z=$u; u=$d; d=$z; z=$l; l=$r; r=$z;;
        x) x='0';;
        \?) echo "$USAGE" 1>&2; exit 1;;
    esac
done
if [ $# -ge "$OPTIND" ]; then
    echo "$USAGE" 1>&2
    exit 1;
fi

# Operate on the Chromium OS X11 server
export DISPLAY=':0' XAUTHORITY='/etc/X11/host-Xauthority'

# If we launched this from a terminal, release return just in case; if the
# xinput window appears before return is pressed, the release will get eaten.
if tty -s; then
    xte 'keyup Return'
fi

# Wait for ratpoison to come up
while ! xprop -root _NET_WM_NAME | grep -q 'ratpoison'; do sleep .1; done 2>&-

# Fork a process that hides the xinput window as soon as possible.
# The xinput window is the only focusable window with no name.
xev -root <&- | mawk -W interactive '
    m {
        id = substr($4, 1, length($4) - 1)
        if (system("xprop WM_NAME _NET_WM_NAME -id " id " \
                    | grep -vq \"not found\"")) {
            system("xdotool windowunmap " id)
            exit
        }
        m = 0
    }
    /^MapNotify/ {
        m = 1
    }
' &

# Wait for ratpoison to have more than one window (so that ratpoison doesn't
# quit when we kill the xinput window)
while ! windows="`/usr/bin/ratpoison -c 'windows %%'`" || [ "$windows" = % ]; do
    sleep .1
done

# Get the aura root window number (hex)
aura="`xwininfo -root -children | mawk '/aura_root/ {print $1}'`"

# Monitor xinput2 events, reacting only to scroll events (axes 2 and 3).
# Accumulate the x and y scrolls, but reduce the acceleration so it doesn't go
# crazy. After a threshold, simulate the wheel presses using xte.
# Use xev to detect window changes and disable mouse wheel events when aura is
# focused.
# The goal of this system is to avoid having to launch any processes on a
# per-event basis, both to improve latency and performance as well as handle the
# case where this script outlives the chroot.
{
    stdbuf -oL xinput test-xi2 <&- &
    xi="$!"
    xev -root <&- &
    trap "kill $! $xi 2>&- || true" INT TERM HUP 0
    # Ping every 5 seconds to get SIGPIPE when xte is killed.
    while sleep 5; do
        echo 'ping'
    done
} <&- | mawk -W interactive '
    /^ping$/ {
        print "sleep 0"
    }
    m {
        if ($4 == "'"$aura"',") {
            if (m == "MapNotify") {
                w = 1
                x = 0
                y = 0
            } else {
                w = 0
            }
        }
        m = ""
    }
    /^U?n?[Mm]apNotify/ {
        m = $1
    }

    !w && /^EVENT type 17/ {
        a = 1
    }
    a && '$x' && ($1 == "2:") && ($2 != 0) {
        if ($2 > 0) {
            if (x < 0) x = 0
            x += log($2) * '"$xs"' + '"$xc"'
        } else {
            if (x > 0) x = 0
            x -= log(-$2) * '"$xs"' + '"$xc"'
        }
        while (x >= 1) {
            print "mouseclick '$r'"
            x -= 1
        }
        while (x <= -1) {
            print "mouseclick '$l'"
            x += 1
        }
    }
    a && ($1 == "3:") && ($2 != 0) {
        if ($2 > 0) {
            if (y < 0) y = 0
            y += log($2) * '"$ys"' + '"$yc"'
        } else {
            if (y > 0) y = 0
            y -= log(-$2) * '"$ys"' + '"$yc"'
        }
        while (y >= 1) {
            print "mouseclick '$d'"
            y -= 1
        }
        while (y <= -1) {
            print "mouseclick '$u'"
            y += 1
        }
    }
    a && /^$/ {
        a = 0
    }
' | xte &
trap "kill $! 2>&- || true" INT TERM HUP 0
wait
exit 0
