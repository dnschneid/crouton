#!/bin/sh -e
# Copyright (c) 2017 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

USAGE="${0##*/} -j
${0##*/} -t title [-m message] [-d] [-i icon] [-I id]
Raises a notification in Chromium OS (requires crouton extension).

When -j is specified, reads JSON data from stdin, in the format required
by chrome.notifications API, with 2 additional fields, \"crouton_id\" and
\"crouton_display\", corresponding respectively to the notification id, and the
display to switch to when the notification is clicked (croutoncycle parameter).

Otherwise, constructs a \"basic\" notification with the requested fields.

Options:
    -j       Read JSON data from stdin (see example below)
    -t       Title to display (chrome.notifications field: \"title\")
    -m       Message to display (chrome.notifications field: \"message\")
    -d       Switch to display in environment variable DISPLAY ($DISPLAY) when
             the notification is clicked. Default: Do not switch display.
    -i       Small icon to display on the left of the notification
             (chrome.notifications field: \"iconUrl\")
    -I       ID to pass to chrome.notifications.create: only the last
             notification with a given ID is shown.
             Default: Display a new notification.

Example JSON data:
"'{
  "type": "basic",
  "title": "Primary Title",
  "message": "Primary message to display",
  "crouton_display": ":1",
  "iconUrl": "data:image/png;base64,<base64 encoded png data>"
}'

. "$(dirname "$0")/../installer/functions"

SWITCHDISPLAY=""
MESSAGE=""
TITLE=""
ID=""
ICON=""
JSON=""

# Process arguments
while getopts 'di:I:jm:t:' f; do
    case "$f" in
    d) SWITCHDISPLAY="$DISPLAY";;
    i) ICON="$OPTARG";;
    I) ID="$OPTARG";;
    j) JSON="y";;
    m) MESSAGE="$OPTARG";;
    t) TITLE="$OPTARG";;
    \?) error 2 "$USAGE";;
    esac
done

# No extra parameters, -j precludes other parameters, and at least title
# must be specified (or -j)
if [ "$#" != "$((OPTIND-1))" ] ||
        [ "$JSON" = 'y' -a -n "$SWITCHDISPLAY$ICON$ID$MESSAGE$TITLE" ] ||
        [ -z "$JSON$TITLE" ]; then
    error 2 "$USAGE"
fi

if [ -n "$ICON" ] && [ ! -r "$ICON" -o ! -f "$ICON" ]; then
    error 2 "Cannot open $ICON."
fi

# Escape json string (backslash and double quotes)
json_escape() {
    echo -n "$1" | sed -e 's/\\/\\u005C/g;s/"/\\u0022/g;2~1s/^/\\u000A/;' \
                 | tr -d '\n'
}

STATUS="$({
    echo -n "N"
    if [ -z "$JSON" ]; then
        echo -n '{
            "type": "basic",
            "title": "'"$(json_escape "$TITLE")"'",
            "message": "'"$(json_escape "$MESSAGE")"'",
            "crouton_display": "'"$(json_escape "$SWITCHDISPLAY")"'",
            "crouton_id": "'"$(json_escape "$ID")"'"'
        if [ -n "$ICON" ]; then
            ext="${ICON##*.}"
            if grep -Iq '<svg' "$ICON"; then
                ext='svg+xml'
            fi
            echo -n ', "iconUrl": "data:image/'"${ext:-png}"';base64,'
            base64 -w 0 "$ICON"
            echo '"'
        fi
        echo -n '}'
    else
        cat
    fi
} | websocketcommand)"

if [ "$STATUS" != 'NOK' ]; then
    error 1 "${STATUS#?}"
fi
