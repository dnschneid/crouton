#!/bin/sh -e
# Copyright (c) 2016 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Synchronizes clipboard between X displays, making use of crouton's WebSocket
# server and Chromium extension to synchronize the clipboard with Chromium OS.

VERBOSE=''

. "`dirname "$0"`/../installer/functions"

# rundisplay :X cmd ...
# Run a command on the specified display
rundisplay() {
    local disp="$1"
    shift
    DISPLAY="$disp" "$@"
}

copyclip() {
    next="$1"

    # Do not copy if next is empty (display cannot be detected), or
    # if current == next. Also set current=$next if $current is empty.
    if [ -z "$next" -o "${current:="$next"}" = "$next" ]; then
        [ -n "$VERBOSE" ] && echo "==Current: $current==Next: $next==" 1>&2
        return 0
    fi

    [ -n "$VERBOSE" ] && echo ">>Current: $current>>" 1>&2

    # Copy clipboard content from the current display.
    {
        if [ "$current" = 'cros' ]; then
            echo -n 'R' | websocketcommand
        else
            # Check if display is still running.
            if rundisplay "$current" xdpyinfo >/dev/null 2>&1; then
                echo -n 'R'
                rundisplay "$current" xsel -ob
            else
                echo -n "EUnable to open display '$current'."
            fi
        fi
    } | {
        STATUS="`head -c 1`"
        if [ "$STATUS" != 'R' ]; then
            echo -n "croutonwebsocket error: " >&2
            cat >&2
            exit 0
        fi

        # Paste clipboard content to the next display.
        if [ "$next" = 'cros' ]; then
            STATUS="`(echo -n 'W'; cat) | websocketcommand`"
            if [ "$STATUS" != 'WOK' ]; then
                echo -n "croutonwebsocket error: $STATUS" >&2
                exit 1
            fi
        else
            # Avoid overriding content if it "looks" the same.
            cliptmp="`mktemp "croutonclip.XXX" --tmpdir=/tmp`"
            trap "rm -f '$cliptmp'" 0
            cat > "$cliptmp"

            if ! rundisplay "$next" xsel -ob | diff -q - "$cliptmp" >/dev/null; then
                rundisplay "$next" xsel -ib < "$cliptmp"
            fi
        fi
    } && current="$next"

    [ -n "$VERBOSE" ] && echo "<<Next: $current<<" 1>&2
}

# Wait for the websocket server to get connected to the extension.
waitwebsocket() {
    timeout=10
    while [ $timeout -gt 0 ]; do
        [ -n "$VERBOSE" ] && echo "Ping..." 1>&2

        # Prepare and send a ping message.
        MSG="PING$$$timeout"
        STATUS="`echo -n "$MSG" | websocketcommand`"
        if [ "$STATUS" = "$MSG" ]; then
            [ -n "$VERBOSE" ] && echo "OK!" 1>&2
            return 0
        fi

        [ -n "$VERBOSE" ] && echo "$STATUS" 1>&2
        sleep 1
        timeout=$((timeout-1))
    done
    echo "Timeout waiting for extension to connect." >&2
}

# Assume current display is Chromium OS to avoid race conditions.
current='cros'

mkdir -m 775 -p "$CROUTONLOCKDIR"
exec 3>>"$CROUTONLOCKDIR/clip"
chmod -Rf g+rwX "$CROUTONLOCKDIR" || true
chgrp -Rf crouton "$CROUTONLOCKDIR" || true
if ! flock -n 3; then
    echo "Another instance of croutonclip running, waiting..."
    flock 3
fi

addtrap "echo -n > '$CROUTONLOCKDIR/clip' 2>/dev/null"

(
    # Subshell to handle USR1 signals from croutoncycle.
    # This subshell also handles VT changes for updates.

    croutonwebsocket &
    addtrap "kill $! 2>/dev/null"

    waitwebsocket

    if hash croutonvtmonitor 2>/dev/null; then
        croutonvtmonitor &
        addtrap "kill $! 2>/dev/null"
    fi

    trap "echo 'USR1'" USR1

    sh -c 'echo -n "$PPID"' > "$CROUTONLOCKDIR/clip"
    echo "Force"

    while ! wait; do :; done
) | (
    exec 3>/dev/null
    while read -r line; do
        display="`croutoncycle display`"
        copyclip "$display"
    done
)

exit 1
 
   
       
            
        
           
               

 
       

 

 

  

     
 
