#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# Synchronizes clipboard between X displays, making use of crouton's WebSocket
# server and Chromium extension to synchronize the clipboard with Chromium OS

VERBOSE=''

. "`dirname "$0"`/../installer/functions"

PIPEDIR='/tmp/crouton-ext'
PIPEIN="$PIPEDIR/in"
PIPEOUT="$PIPEDIR/out"
PIPELOCK="$PIPEDIR/lock"

# Write a command to croutonwebsocket, and read back response
websocketcommand() {
    # Check that $PIPEDIR and the FIFO pipes exist
    if ! [ -d "$PIPEDIR" -a -p "$PIPEIN" -a -p "$PIPEOUT" ]; then
        echo "EError $PIPEIN or $PIPEOUT are not pipes."
        exit 0
    fi

    (
        flock 5
        cat > "$PIPEIN"
        cat "$PIPEOUT"
    ) 5>"$PIPELOCK"
}

# rundisplay :X cmd ...
# Run a command on the specified display (uses host-x11 on :0)
rundisplay() {
    local disp="$1"
    shift
    if [ "$disp" = ":0" ]; then
        host-x11 "$@"
    else
        DISPLAY="$disp" "$@"
    fi
}

copyclip() {
    next="$1"

    # Do not copy if next is empty (display cannot be detected), or
    # if current == next. Also set current=$next if $current is empty
    if [ -z "$next" -o "${current:="$next"}" = "$next" ]; then
        if [ -n "$VERBOSE" ]; then
            echo "==Current: $current==Next: $next=="
        fi
        return 0
    fi

    if [ -n "$VERBOSE" ]; then
        echo ">>Current: $current>>"
    fi

    # Copy clipboard content from the current display
    {
        if [ "$current" = 'aura' ]; then
            echo -n 'R' | websocketcommand
        else
            # Check if display is still running
            if rundisplay "$current" xdpyinfo >/dev/null 2>&1; then
                echo -n 'R'
                rundisplay "$current" xclip -o -sel clip
            else
                echo -n "EUnable to open display '$current'."
            fi
        fi
    } | (
        STATUS="`head -c 1`"
        if [ "$STATUS" != 'R' ]; then
            echo -n "croutonwebsocket error: " >&2
            cat >&2
            # Stop here (the clipboard content is lost in this case)
            exit 0
        fi

        # Paste clipboard content to the next display
        if [ "$next" = 'aura' ]; then
            STATUS="`(echo -n 'W'; cat) | websocketcommand`"
            if [ "$STATUS" != 'WOK' ]; then
                # Write failed, skip Chromium OS (do not update $current)
                echo -n "croutonwebsocket error: $STATUS" >&2
                exit 1
            fi
        else
            # Do not override content if it "looks" the same
            # (we might have rich text or other content in the clipboard)
            cliptmp="`mktemp "croutonclip.XXX" --tmpdir=/tmp`"
            trap "rm -f '$cliptmp'" 0
            cat > $cliptmp

            if ! rundisplay "$next" xclip -o -sel clip \
                    | diff -q - "$cliptmp" > /dev/null; then
                cat "$cliptmp" | rundisplay "$next" xclip -i -sel clip
            fi
        fi
    ) && current="$next"

    if [ -n "$VERBOSE" ]; then
        echo "<<Next: $current<<"
    fi
}

# Wait for the websocket server to get connected to the extension
# Timeout after 10 seconds (twice crouton extension retry period)
waitwebsocket() {
    timeout=10
    while [ $timeout -gt 0 ]; do
        if [ -n "$VERBOSE" ]; then
            echo "Ping..."
        fi

        # Prepare and send a ping message
        MSG="PING$$$timeout"
        STATUS="`echo -n "$MSG" | websocketcommand`"
        if [ "$STATUS" = "$MSG" ]; then
            if [ -n "$VERBOSE" ]; then
                echo "OK!"
            fi
            return 0
        fi

        if [ -n "$VERBOSE" ]; then
            echo "$STATUS"
        fi

        sleep 1
        timeout=$(($timeout-1))
    done
    echo "Timeout waiting for extension to connect." >&2
}

# Assume current display is Chromium OS: avoid race as we may not be able to
# detect the first VT/window change.
current='aura'

# Only let one instance *really* run at a time
PIDFILE='/tmp/crouton-lock/clip'

mkdir -m 775 -p /tmp/crouton-lock
exec 3>>"$PIDFILE"
if ! flock -n 3; then
    echo "Another instance of croutonclip running, waiting..."
    flock 3
fi

addtrap "echo -n > '$PIDFILE' 2>/dev/null"
PID="$$"

# croutoncycle sends SIGUSR1 to us when needed.
# We do not care about receiving every single display change in close
# succession, and we are able to filter out duplicate notifications. On the
# other hand, we need to make sure the display in $current is the actual one
# before we start waiting again: The variable SIG catches further display
# changes while we are transfering the clipboard content.

# Force an update when started.
SIG='force'
trap "SIG='USR1'" USR1

# Set the PID after the trap is in place
echo -n "$PID" > "$PIDFILE"

# Create a dummy FIFO. Reading the FIFO will block until interrupted by a signal
tmpdir="`mktemp -d --tmpdir=/tmp croutonclip.XXX`"
addtrap "rm -rf --one-file-system '$tmpdir'"
SIGFIFO="$tmpdir/clip.fifo"
mkfifo -m 400 "$SIGFIFO"

# Send signal on VT change (if user types Ctrl-Alt instead of Ctrl-Alt-Shift)
if hash croutonvtmonitor 2>/dev/null; then
    ( croutonvtmonitor | while read line; do kill -USR1 "$PID"; done ) &
    addtrap "kill $! 2>/dev/null"
fi

croutonwebsocket &
addtrap "kill $! 2>/dev/null"

waitwebsocket

while true; do
    if [ -z "$SIG" ]; then
        # Redirect stderr to /dev/null to avoid "Interrupted system call"
        # messages. Save stderr to fd 3 so we can restore it later.
        exec 3>&2 2>/dev/null
        # Block until a signal is received
        read < "$SIGFIFO" || true
        exec 2>&3 3>&-
    fi
    # This is _not_ a potential race: the current display is read after this.
    SIG=''

    display="`croutoncycle display`"
    copyclip "$display"
done

exit 1
