#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
REQUIRES='core'
DESCRIPTION='Support audio playback via Chromium OS'\''s audio system.'
CHROOTETC='pulseaudio-default.pa'
. "${TARGETSDIR:="$PWD"}/common"

### Append to prepare.sh:

# Install CRAS dependencies

install --minimal wget alsa-utils dbus libasound2 libspeexdsp1

install --minimal --asdeps gcc libc-dev pkg-config \
    libdbus-1-dev libasound2-dev libspeexdsp-dev

# SBC is not available in older Debian/Ubuntu: fetch it manually
if [ "$RELEASE" = 'precise' -o "$RELEASE" = 'quantal' -o \
     "$RELEASE" = 'wheezy' ]; then
    install_mirror_package 'libsbc1' 'pool/main/s/sbc' '1\.1.*'
    install_mirror_package 'libsbc-dev' 'pool/main/s/sbc' '1\.1.*'
    apt-mark auto libsbc-dev
else
    install --minimal libsbc1
    install --minimal --asdeps libsbc-dev
fi

# Build CRAS from source

CRASBUILDTMP="`mktemp -d crouton-cras.XXXXXX --tmpdir=/tmp`"

addtrap "rm -rf '$CRASBUILDTMP' 2>/dev/null"

( # Start subshell for compilation
    cd "$CRASBUILDTMP"

    # Fetch list of branches from repository
    wget --no-check-certificate -O adhd.refs \
'https://chromium.googlesource.com/chromiumos/third_party/adhd/+refs/heads?format=TEXT'

    # Chrome OS version (e.g. 4100.86.0)
    CROS_VER="`sed -n 's/^CHROMEOS_RELEASE_VERSION=//p' /var/host/lsb-release`"

    ADHD_HEAD="`mawk '
        BEGIN {
            # Default to master if nothing else is found
            print 0, "master"
            len = split("'"$CROS_VER"'", crosvers, ".")
            # Prepare a regex with each additional version component optional
            for (i = len; i >= 2; i--)
                verregex = "(\." crosvers[i] verregex ")?"
            verregex = crosvers[1] verregex "($|\.)"
        }
        # Release branches get the highest score
        $2 ~ "release-(R[^-]*-)?" crosvers[1] "($|\.)" {
            print 99, $2
        }
        # Stabilize branches are scored based on how much of the version they match
        match($2, "stabilize-" verregex) {
            print RLENGTH, $2
        }
    ' adhd.refs | sort -V | tail -n 1 | cut -d' ' -f2`"

    echo "Fetching CRAS (branch $ADHD_HEAD)..." 1>&2

    wget --no-check-certificate -O adhd.tar.gz \
'https://chromium.googlesource.com/chromiumos/third_party/adhd/+archive/'"$ADHD_HEAD"'.tar.gz'

    # -m prevents "time stamp is in the future" spam
    tar -xmf adhd.tar.gz cras/src
    cd cras/src

    # Directory to install CRAS library/binaries
    CRASLIBDIR="/usr/local/lib"
    CRASBINDIR="/usr/local/bin"

    echo "Compiling CRAS..." 1>&2
    # Convert Makefile.am to a shell script, and run it.
    {
        echo '
            top_srcdir=".."
            SBC_LIBS="'"`pkg-config --libs sbc`"'"
            SBC_CFLAGS="'"`pkg-config --cflags sbc`"'"
            DBUS_LIBS="'"`pkg-config --libs dbus-1`"'"
            DBUS_CFLAGS="'"`pkg-config --cflags dbus-1`"'"
        '
        sed -e '
            # Concatenate lines ending in \
            : start; /\\$/{N; b start}
            s/ *\\\n[ \t]*/ /g
            # Convert automake to shell
            s/^[^ ]*:/#\0/
            s/^\t/#\0/
            s/ *= */=/
            s/\([^ ]*\) *+= */\1=${\1}\ /
            s/ /\\ /g
            y/()/{}/
        ' 'Makefile.am'
        echo '
            # buildsources: Build all source files for target
            #  $1: target
            #  $2: additional gcc flags
            # Prints a list of .o files
            buildsources() {
                local target="$1"
                local extragccflags="$2"

                eval local sources=\"\$${target}_SOURCES\"
                eval local cppflags=\"\$${target}_CPPFLAGS\"

                for dep in $sources; do
                    if [ "${dep%.c}" != "$dep" ]; then
                        ofile="${dep%.c}.o"
                        gcc -c "$dep" -o "$ofile" $cppflags $extragccflags 1>&2
                        echo -n "$ofile "
                    fi
                done
            }

            # fixlibadd: Fix list of libraries ($1): replace lib<x>.la by -l<x>
            fixlibadd() {
                for libdep in $*; do
                    if [ "${libdep%.la}" != "$libdep" ]; then
                        libdep="${libdep%.la}"
                        libdep="-l${libdep#lib}"
                    fi
                    echo -n "$libdep "
                done
            }

            # buildlib: Build a library
            #  $1: library name
            #  $2: additional linker flags
            buildlib() {
                local lib="$1"
                local extraflags="$2"
                local ofiles="`buildsources "${lib}_la" "-fPIC -DPIC"`"

                eval local libadd=\"\$${lib}_la_LIBADD\"
                eval local ldflags=\"\$${lib}_la_LDFLAGS\"

                libadd="`fixlibadd $libadd`"

                # Detect library version (e.g. 0.0.0)
                local fullver="`echo -n "$ldflags" | \
                  sed -n '\''y/:/./; s/.*-version-info \([0-9.]*\)$/\\1/p'\''`"
                local shortver=""
                # Get "short" library version (e.g. 0)
                if [ -n "$fullver" ]; then
                    shortver=".${fullver%%.*}"
                    fullver=".$fullver"
                fi
                local fullso="$lib.so$fullver"
                local shortso="$lib.so$shortver"
                gcc -shared -fPIC -DPIC $ofiles $libadd -o "$fullso" \
                    $extraflags -Wl,-soname,"$shortso"
                if [ -n "$fullver" ]; then
                    ln -sf "$fullso" "$shortso"
                    # Needed at link-time only
                    ln -sf "$shortso" "$lib.so"
                fi
            }

            # buildexe: Build an executable file
            #  $1: executable file name
            #  $2: additional linker flags
            buildexe() {
                local exe="$1"
                local extraflags="$2"
                local ofiles="`buildsources "$exe" ""`"

                eval local ldadd=\"\$${exe}_LDADD\"
                eval local ldflags=\"\$${exe}_LDFLAGS\"

                ldadd="`fixlibadd $ldadd`"

                gcc $ofiles $ldadd -o "$exe" $extraflags
            }

            buildlib libcras

            # Pass -rpath=$CRASLIBDIR to linker, so we do not need to add the
            # directory to ldconfig search path (some distributions do not
            # include /usr/local/lib in /etc/ld.so.conf).
            # We also need to add "-L." as we are not using .la files.
            extraflags="-Wl,-rpath='"$CRASLIBDIR"' -L."

            buildlib libasound_module_pcm_cras "$extraflags"
            buildlib libasound_module_ctl_cras "$extraflags"
            buildexe cras_test_client "$extraflags"
        '
    } | sh -s -e $SETOPTIONS

    echo "Installing CRAS..." 1>&2

    ALSALIBDIR="`pkg-config --variable=libdir alsa`/alsa-lib"

    # Only install libcras.so.X.Y.Z
    /usr/bin/install -sD libcras.so.*.* "$CRASLIBDIR/"
    # Generate symbolic link to libcras.so.X
    ldconfig -l "$CRASLIBDIR"/libcras.so.*.*
    /usr/bin/install -sD libasound_module_pcm_cras.so "$ALSALIBDIR/"
    /usr/bin/install -sD libasound_module_ctl_cras.so "$ALSALIBDIR/"
    /usr/bin/install -sD cras_test_client "$CRASBINDIR/"
) # End compilation subshell

cat > /usr/share/alsa/alsa.conf.d/10-cras.conf <<EOF
pcm.cras {
    type cras
    hint {
        show on
        description "Chromium OS Audio Server"
    }
}
ctl.cras {
    type cras
}

# Default: route all audio through the CRAS plugin.
pcm.!default {
    type cras
    hint {
        show on
        description "Default ALSA Output (currently Chromium OS Audio Server)"
    }
}
ctl.!default {
    type cras
}
EOF

# Configure pulseaudio even if it is not installed (yet).
# We use ~/.config/pulse/default.pa for this purpose, but the main user may
# not have been created yet, so we add a script in /etc/profile.d to link
# ~/.config/pulse/default.pa to /etc/crouton/pulseaudio-default.pa.

paconfigdir='$HOME/.config/pulse'
# Old versions of pulseaudio use ~/.pulse/default.pa
if [ "$RELEASE" = 'precise' -o "$RELEASE" = 'quantal' -o \
     "$RELEASE" = 'wheezy' ]; then
    paconfigdir='$HOME/.pulse'
fi

profiledsh='/etc/profile.d/crouton-pulseaudio-cras.sh'
# Make sure symbolic link is setup on login
echo '#!/bin/sh

defaultpa="'"$paconfigdir"'/default.pa"
# Do not install if user is root, or $HOME does not exist
if [ "`id -u`" -ne 0 -a -d "$HOME" -a ! -e "$defaultpa" ]; then
    mkdir -p "'"$paconfigdir"'"
    ln -sfT /etc/crouton/pulseaudio-default.pa "$defaultpa"
fi' > "$profiledsh"

chmod 755 "$profiledsh"

TIPS="$TIPS
Audio from the chroot will now be forwarded to CRAS (Chromium OS audio server),
through an ALSA plugin.

Future Chromium OS upgrades may break compatibility with the installed version
of CRAS. Should this happen, simply update your chroot.
"
