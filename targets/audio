#!/bin/sh -e
# Copyright (c) 2014 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
REQUIRES='core'
DESCRIPTION='Support audio playback via Chromium OS'\''s audio system.'
CHROOTETC='pulseaudio-default.pa'
. "${TARGETSDIR:="$PWD"}/common"

### Append to prepare.sh:

# Fetch CRAS source

CRASBUILDTMP="`mktemp -d crouton-cras.XXXXXX --tmpdir=/tmp`"

addtrap "rm -rf --one-file-system '$CRASBUILDTMP'"

# ADHD_HEAD is normally autodetected, but it can be set manually using a custom
# target sourced before this one (used for automated testing)
# The custom target also needs to set CROS_VER_1
if [ -z "$ADHD_HEAD" ]; then
    # Chrome OS version (e.g. 4100.86.0)
    CROS_VER="`sed -n 's/^CHROMEOS_RELEASE_VERSION=//p' /var/host/lsb-release`"

    # Set CROS_VER_1 to the major version number (e.g. 4100), used later on to
    # selectively apply patches.
    CROS_VER_1="${CROS_VER%%.*}"

    cras_version="`cat /var/host/cras-version 2>/dev/null || true`"
    ADHD_HEAD="${cras_version##*-}"
    # Make sure ADHD_HEAD looks like a commit id
    if [ "${#ADHD_HEAD}" -ne 40 -o "${head%[^0-9a-f]*}" != "$head" ]; then
        echo "Empty or invalid cras-version (${cras_version})." 1>&2
        ADHD_HEAD=""
    fi
fi

# TODO: Remove autodetection code (not needed since build 6276)
if [ -z "$ADHD_HEAD" ]; then
    # Fetch list of branches from repository
    wget -O "$CRASBUILDTMP/adhd.refs" \
'https://chromium.googlesource.com/chromiumos/third_party/adhd/+refs/heads?format=TEXT'

    echo "Detecting CRAS branch (Chromium OS build $CROS_VER)..." 1>&2

    ADHD_HEAD="`awk '
        BEGIN {
            len = split("'"$CROS_VER"'", crosvers, ".")
            # Prepare a regex with each additional version component optional
            for (i = len; i >= 2; i--)
                verregex = "(\\\\." crosvers[i] verregex ")?"
            verregex = crosvers[1] verregex "($|\\\\.)"
        }
        # Release branches get the highest score
        $2 ~ "release-(R[^-]*-)?" crosvers[1] "($|\\\\.)" {
            print 99, $2
        }
        # Stabilize branches are scored based on how much of the version they match
        match($2, "stabilize-" verregex) {
            print RLENGTH, $2
        }
    ' "$CRASBUILDTMP/adhd.refs" | sort -V | tail -n 1 | cut -d' ' -f2`"

    # If no branch can be found, fall back on manifests. This should only be
    # needed on dev or canary channel, and this cannot be used on stable/beta,
    # as additional patches may be added to the git branch.
    if [ -z "$ADHD_HEAD" ]; then
        echo "No CRAS branch found, falling back on manifests..." 1>&2

        MANIFEST_GIT="https://chromium.googlesource.com/chromiumos/manifest-versions/+/master/chrome-LKGM-candidates"

        # Get the list of releases (e.g. 35). Only last 2 should be required.
        majorlist="`wget -O- "$MANIFEST_GIT/buildspecs" \
            | tr '>' '\n' | sed -n 's|^\([0-9]*\)/<.*|\1|p' \
            | sort -n -r | head -n 2`"

        for major in $majorlist; do
            # Get the latest manifest for the current build
            manifest="`wget -O- "$MANIFEST_GIT/buildspecs/$major" \
                 | sed -n 's/.*\('"$CROS_VER_1"'.0.0-rc[0-9]*.xml\).*/\1/p'`"

            if [ -n "$manifest" ]; then
                # Fetch git commit id
                ADHD_HEAD="`wget -O- \
                    "$MANIFEST_GIT/buildspecs/$major/$manifest?format=TEXT" \
                        | base64 -d \
| sed -n 's|.*path="src/third_party/adhd".* revision="\([0-9a-f]*\)".*|\1|p'`"
                break
            fi
        done
    fi

    if [ -z "$ADHD_HEAD" ]; then
        echo "Cannot figure out CRAS branch or commit ID." 1>&2
        exit 1
    fi
fi

echo "Fetching CRAS (branch $ADHD_HEAD)..." 1>&2

# Try to download the CRAS commit id first, and fall back on master if that is
# not found (see crbug.com/417820).

archive="$CRASBUILDTMP/adhd.tar.gz"
log="$CRASBUILDTMP/wget.log"
urlbase="https://chromium.googlesource.com/chromiumos/third_party/adhd/+archive"
( wget -O "$archive" "$urlbase/$ADHD_HEAD.tar.gz" 2>&1 \
                                    || echo "Error fetching CRAS" ) | tee "$log"
if tail -n 1 "$log" | grep -q "^Error"; then
    if grep -q "404 Not Found" "$log" 2>/dev/null; then
        echo "Branch not found, falling back on master (audio might not work)..." 1>&2
        ADHD_HEAD="master"
        wget -O "$archive" "$urlbase/$ADHD_HEAD.tar.gz"
    else
        # wget already printed an explicit error
        exit 1
    fi
fi

# Patch CRAS so that x86 client can connect to x86_64 server (multilib)
# Assume current directory is "$CRASBUILDTMP"/cras/src
patch_cras_x86_x86_64() {
    echo "Patching CRAS (x86 client with x86_64 server)..." 1>&2

    common="common/cras_shm.h common/cras_messages.h common/cras_iodev_info.h \
            common/cras_types.h common/cras_audio_format.c"
    cras_audio_format_h=""

    # Newer versions (>=5062) contain an additional header file
    if [ -e "common/cras_audio_format.h" ]; then
        cras_audio_format_h="common/cras_audio_format.h"
    fi

    # Replace size_t/long by fixed-size integers corresponding to their
    # respective sizes on x86_64, aligned on 8-byte boundaries
    sed -i -e 's/uint64_t[ \t]/aligned_uint64_t /g
               s/size_t[ \t]/aligned_uint64_t /g
               s/long[ \t]/aligned_int64_t /g' $common $cras_audio_format_h

    # Hack to make sure sizeof(struct cras_server/client_message) is a
    # multiple of 8
    sed -i -e \
        's/\(enum CRAS_CLIENT_MESSAGE_ID\) id;/\1 __attribute__((aligned(8))) id;/
         s/\(enum CRAS_SERVER_MESSAGE_ID\) id;/\1 __attribute__((aligned(8))) id;/' \
        common/cras_messages.h

    # Disable syslog to remove warnings about printf formats
    sed -i -e '/#include <syslog.h>/a \
#define syslog(...) do \{\} while(0)' \
        common/cras_fmt_conv.c libcras/cras_client.c

    # Replace timespec/timeval
    sed -i -e 's/struct timespec[ \t]/struct cras_timespec /g
               s/clock_gettime(/cras_clock_gettime(/' \
        $common $cras_audio_format_h common/cras_util.h \
        libcras/cras_client.h libcras/cras_client.c \
        alsa_plugin/pcm_cras.c tests/cras_test_client.c
    sed -i -e \
        's/struct timeval/struct { aligned_int64_t tv_sec; aligned_int64_t tv_usec; }/' \
        common/cras_iodev_info.h

    # Include compat file (it will get included multiple times, but this is
    # harmless compared to the complexity of a sed script that replaces the
    # first match only)
    sed -i -e '/#include.*/i \
#include "cras_x86_64_compat.h"' common/cras_iodev_info.h $cras_audio_format_h

    # Create a new header file with x86_64 compatibility types: aligned integers
    # and timespec wrapper.
    cat > common/cras_x86_64_compat.h <<END
#ifndef CRAS_X86_64_COMPAT_H_
#define CRAS_X86_64_COMPAT_H_

#include <stdint.h>
#include <time.h>

typedef uint64_t __attribute__((aligned(8))) aligned_uint64_t;
typedef int64_t  __attribute__((aligned(8))) aligned_int64_t;

struct cras_timespec {
       aligned_int64_t tv_sec;
       aligned_int64_t tv_nsec;
};

static inline int cras_clock_gettime(clockid_t clk_id, struct cras_timespec *ctp) {
    struct timespec tp;
    int ret = clock_gettime(clk_id, &tp);
    ctp->tv_sec = tp.tv_sec;
    ctp->tv_nsec = tp.tv_nsec;
    return ret;
}
#endif
END

    # Restore uncorrectly replaced timespecs, add 2 necessary casts
    sed -i -e 's/struct cras_timespec sleep_ts;/struct timespec sleep_ts;/
               s/struct cras_timespec wait_time;/struct timespec wait_time;/
               s/\(.*\)cras_clock_gettime\(.*&wait_time);.*\)/\1clock_gettime\2/
               s/nodes\[i\].priority/(size_t)nodes[i].priority/
               s/clients\[i\].id/(size_t)clients[i].id/' \
                   tests/cras_test_client.c
}

# Build CRAS ALSA plugin for the given architecture ($1)
# A blank parameter means we are building for the native architecture.
build_cras() {
    local cras_arch="$1"
    local pkgsuffix=''
    local pkgdepextra=''
    local archextrapath=''
    local pkgconfigpath=''
    local archgccflags=''
    if [ -n "$cras_arch" ]; then
        pkgsuffix=":$cras_arch"
        pkgdepextra='gcc-multilib'
        archextrapath="/$cras_arch-linux-gnu"
        pkgconfigpath="/usr/lib$archextrapath/pkgconfig"
        archgccflags='-m32'

        # Add foreign architecture, if necessary
        if ! dpkg --print-foreign-architectures | grep -q "^$cras_arch$"; then
            echo "Adding foreign architecture $cras_arch to dpkg..." 1>&2
            dpkg --add-architecture "$cras_arch"
            apt-get update
        fi
    fi

    # Install CRAS dependencies
    install --minimal alsa-utils \
        libasound2$pkgsuffix libspeexdsp1$pkgsuffix

    install --minimal --asdeps gcc $pkgdepextra libc6-dev$pkgsuffix \
        pkg-config libspeexdsp-dev$pkgsuffix

    # precise does not allow libasound2-dev and libasound2-dev:i386 to be
    # installed simultaneously
    if release -le precise && [ -n "$cras_arch" ]; then
        install --minimal --asdeps libasound2-dev
        # Manually link .so file
        libasoundso="/usr/lib$archextrapath/libasound.so"
        if [ ! -f "$libasoundso" ]; then
            addtrap "rm -f '$libasoundso' 2>/dev/null"
            ln -sfT libasound.so.2 "$libasoundso"
        fi
        ALSALIBDIR="/usr/lib$archextrapath/alsa-lib"
    else
        install --minimal --asdeps libasound2-dev$pkgsuffix
        ALSALIBDIR="`PKG_CONFIG_PATH="$pkgconfigpath" \
                                pkg-config --variable=libdir alsa`/alsa-lib"
    fi

    # SBC is not available in older Debian/Ubuntu: fetch it manually
    if release -le quantal; then
        install_mirror_package 'libsbc1' \
                            'pool/main/s/sbc' '1\.1-.*' $cras_arch
        install_mirror_package --asdeps 'libsbc-dev' \
                            'pool/main/s/sbc' '1\.1-.*' $cras_arch
    elif release -le wheezy -eq kali; then
        # wheezy provides a backport for libsbc1
        install_mirror_package 'libsbc1' \
                            'pool/main/s/sbc' '.*~bpo7.*' $cras_arch
        install_mirror_package --asdeps 'libsbc-dev' \
                            'pool/main/s/sbc' '.*~bpo7.*' $cras_arch
    else
        install --minimal libsbc1$pkgsuffix
        install --minimal --asdeps libsbc-dev$pkgsuffix
    fi

    # Start subshell for compilation
    (
        cd "$CRASBUILDTMP"

        # Make sure we start fresh
        rm -rf --one-file-system cras

        # -m prevents "time stamp is in the future" spam
        tar -xmf adhd.tar.gz cras/src

        cd cras/src

        # Create version file
        echo '#define VCSID "crouton-'"$ADHD_HEAD"'"' > common/cras_version.h

        install --minimal --asdeps patch

        # Fix delay function in CRAS ALSA plugin, see http://crbug.com/331637
        # Applied upstream in version 5215
        # FIXME: Remove this when 5215 has trickled down to stable
        if [ "$CROS_VER_1" -lt 5215 ]; then
            echo "Patching CRAS (delay function bug)..." 1>&2
            patch -p3 <<END
diff --git a/cras/src/alsa_plugin/pcm_cras.c b/cras/src/alsa_plugin/pcm_cras.c
index 09ca39d..33c496b 100644
--- a/cras/src/alsa_plugin/pcm_cras.c
+++ b/cras/src/alsa_plugin/pcm_cras.c
@@ -321,17 +321,31 @@ static int snd_pcm_cras_delay(snd_pcm_ioplug_t *io, snd_pcm_sframes_t *delayp)
 	 * the difference between appl_ptr and the old hw_ptr.
 	 */
 	if (io->stream == SND_PCM_STREAM_PLAYBACK) {
-		cras_client_calc_playback_latency(&pcm_cras->playback_sample_time,
-						  &latency);
+		/* Do not compute latency if playback_sample_time is not set */
+		if (pcm_cras->playback_sample_time.tv_sec == 0 &&
+			    pcm_cras->playback_sample_time.tv_nsec == 0) {
+			latency.tv_sec = latency.tv_nsec = 0;
+		} else {
+			cras_client_calc_playback_latency(&pcm_cras->playback_sample_time,
+					&latency);
+		}
+
 		*delayp = limit + io->appl_ptr - pcm_cras->playback_sample_index +
 				latency.tv_sec * io->rate +
-				latency.tv_nsec / (1000000000L / io->rate);
+				latency.tv_nsec / (1000000000L / (long)io->rate);
 	} else {
-		cras_client_calc_capture_latency(&pcm_cras->capture_sample_time,
-						 &latency);
+		/* Do not compute latency if capture_sample_time is not set */
+		if (pcm_cras->capture_sample_time.tv_sec == 0 &&
+			    pcm_cras->capture_sample_time.tv_nsec == 0) {
+			latency.tv_sec = latency.tv_nsec = 0;
+		} else {
+			cras_client_calc_capture_latency(&pcm_cras->capture_sample_time,
+					&latency);
+		}
+
 		*delayp = limit + pcm_cras->capture_sample_index - io->appl_ptr +
 				latency.tv_sec * io->rate +
-				latency.tv_nsec / (1000000000L / io->rate);
+				latency.tv_nsec / (1000000000L / (long)io->rate);
 	}
 
 	/* Both appl and hw pointers wrap at the pcm boundary. */
END
        fi

        # Fix cras_test_client hanging on exit, see http://crbug.com/347997
        # Introduced in upstream build 5339, fixed in 5579
        # FIXME: Remove this when R34/5500 is not an active release anymore
        if [ "$CROS_VER_1" -ge 5339 -a "$CROS_VER_1" -lt 5579 ]; then
            echo "Patching CRAS (cras_test_client bug)..." 1>&2
            patch -p3 <<END
diff --git a/cras/src/libcras/cras_client.c b/cras/src/libcras/cras_client.c
index 37fc2ad..8d26703 100644
--- a/cras/src/libcras/cras_client.c
+++ b/cras/src/libcras/cras_client.c
@@ -1510,6 +1510,7 @@ void cras_client_destroy(struct cras_client *client)
 {
 	if (client == NULL)
 		return;
+	cras_client_stop(client);
 	if (client->server_state)
 		shmdt(client->server_state);
 	if (client->server_fd >= 0)
END
        fi

        # CRAS needs to be patched so that x86 client can access x86_64 server
        # Applied upstream in build 5652, see http://crbug.com/309961
        # FIXME: Remove this when 5652 has trickled down to stable
        if [ "$CROS_VER_1" -lt 5652 ] && [ "`uname -m`" = "x86_64" ] &&
           [ "$ARCH" = "i386" -o "$cras_arch" = "i386" ]; then
            patch_cras_x86_x86_64
        fi

        # Fix volume control, see crbug.com/415661
        # Applied upstream in build 6283
        # FIXME: Remove this when 6283 has trickled down to stable
        if [ "$CROS_VER_1" -lt 6283 ]; then
            echo "Patching CRAS (volume control)..." 1>&2
            patch -p3 <<END
diff --git a/cras/src/alsa_plugin/ctl_cras.c b/cras/src/alsa_plugin/ctl_cras.c
index e9a0c47..e9549d9 100644
--- a/cras/src/alsa_plugin/ctl_cras.c
+++ b/cras/src/alsa_plugin/ctl_cras.c
@@ -161,21 +161,30 @@
 				 long *value)
 {
 	struct ctl_cras *cras = (struct ctl_cras *)ext_ctl->private_data;
+	cras_node_id_t node_id;
+	struct cras_ionode_info node;
 
 	switch (key) {
 	case CTL_CRAS_MIXER_PLAYBACK_SWITCH:
-		*value = !cras_client_get_system_muted(cras->client);
+		*value = !cras_client_get_user_muted(cras->client);
 		break;
 	case CTL_CRAS_MIXER_PLAYBACK_VOLUME:
-		*value = cras_client_get_system_volume(cras->client);
+		node_id = cras_client_get_selected_output(cras->client);
+		if (cras_client_get_node_by_id(cras->client, 0,
+							node_id, &node) < 0)
+			return -EIO;
+		*value = node.volume;
 		break;
 	case CTL_CRAS_MIXER_CAPTURE_SWITCH:
 		*value = !cras_client_get_system_capture_muted(cras->client);
 		break;
 	case CTL_CRAS_MIXER_CAPTURE_VOLUME:
-		*value = capture_gain_to_index(
-			cras->client,
-			cras_client_get_system_capture_gain(cras->client));
+		node_id = cras_client_get_selected_input(cras->client);
+		if (cras_client_get_node_by_id(cras->client, 1,
+							node_id, &node) < 0)
+			return -EIO;
+		*value = capture_gain_to_index(cras->client,
+						node.capture_gain);
 		break;
 	default:
 		return -EINVAL;
@@ -189,20 +198,24 @@
 				   long *value)
 {
 	struct ctl_cras *cras = (struct ctl_cras *)ext_ctl->private_data;
+	cras_node_id_t node_id;
 
 	switch (key) {
 	case CTL_CRAS_MIXER_PLAYBACK_SWITCH:
-		cras_client_set_system_mute(cras->client, !(*value));
+		cras_client_set_user_mute(cras->client, !(*value));
 		break;
 	case CTL_CRAS_MIXER_PLAYBACK_VOLUME:
-		cras_client_set_system_volume(cras->client, *value);
+		node_id = cras_client_get_selected_output(cras->client);
+		cras_client_set_node_volume(cras->client, node_id, *value);
 		break;
 	case CTL_CRAS_MIXER_CAPTURE_SWITCH:
 		cras_client_set_system_capture_mute(cras->client, !(*value));
 		break;
 	case CTL_CRAS_MIXER_CAPTURE_VOLUME:
-		cras_client_set_system_capture_gain(
+		node_id = cras_client_get_selected_input(cras->client);
+		cras_client_set_node_capture_gain(
 				cras->client,
+				node_id,
 				capture_index_to_gain(cras->client, *value));
 		break;
 	default:
END

        cat >>libcras/cras_client.h <<END
int cras_client_get_user_muted(struct cras_client *client);
int cras_client_get_node_by_id(const struct cras_client *client,
			       int input,
			       const cras_node_id_t node_id,
			       struct cras_ionode_info* node_info);
END

        cat >>libcras/cras_client.c <<END
int cras_client_get_user_muted(struct cras_client *client)
{
	if (!client || !client->server_state)
		return 0;
	return client->server_state->user_mute;
}

int cras_client_get_node_by_id(const struct cras_client *client,
			       int input,
			       const cras_node_id_t node_id,
			       struct cras_ionode_info* node_info)
{
	size_t ndevs, nnodes;
	struct cras_iodev_info *devs = NULL;
	struct cras_ionode_info *nodes = NULL;
	int rc = -EINVAL;
	unsigned i;

	if (!client || !node_info) {
		rc = -EINVAL;
		goto quit;
	}

	devs = (struct cras_iodev_info *)
			malloc(CRAS_MAX_IODEVS * sizeof(*devs));
	if (!devs) {
		rc = -ENOMEM;
		goto quit;
	}

	nodes = (struct cras_ionode_info *)
			malloc(CRAS_MAX_IONODES * sizeof(*nodes));
	if (!nodes) {
		rc = -ENOMEM;
		goto quit;
	}

	ndevs = CRAS_MAX_IODEVS;
	nnodes = CRAS_MAX_IONODES;
	if (input)
		rc = cras_client_get_input_devices(client, devs, nodes,
						&ndevs, &nnodes);
	else
		rc = cras_client_get_output_devices(client, devs, nodes,
						&ndevs, &nnodes);
	if (rc < 0)
		goto quit;

	rc = -ENOENT;
	for (i = 0; i < nnodes; i++) {
		if (node_id == cras_make_node_id(nodes[i].iodev_idx,
						 nodes[i].ionode_idx)) {
			memcpy(node_info, &nodes[i], sizeof(*node_info));
			rc = 0;
			break;
		}
	}

quit:
	free(devs);
	free(nodes);
	return rc;
}
END
        fi

        # Directory to install CRAS library/binaries
        CRASLIBDIR="/usr/local$archextrapath/lib"
        CRASBINDIR="/usr/local$archextrapath/bin"

        echo "Compiling CRAS (${cras_arch:-native})..." 1>&2
        # Convert Makefile.am to a shell script, and run it.
        {
            echo '
                top_srcdir=".."
                top_builddir=".."
                SBC_LIBS="'"`PKG_CONFIG_PATH="$pkgconfigpath" \
                                                pkg-config --libs sbc`"'"
                SBC_CFLAGS="'"`PKG_CONFIG_PATH="$pkgconfigpath" \
                                                pkg-config --cflags sbc`"'"
            '
            sed -e '
                # Concatenate lines ending in \
                : start; /\\$/{N; b start}
                s/ *\\\n[ \t]*/ /g
                # Convert automake to shell
                s/^[^ ]*:/#\0/
                s/^\t/#\0/
                s/ *= */=/
                s/\([^ ]*\) *+= */\1=${\1}\ /
                s/ /\\ /g
                y/()/{}/
            ' 'Makefile.am'
            echo '
                # buildsources: Build all source files for target
                #  $1: target
                #  $2: additional gcc flags
                # Prints a list of .o files
                buildsources() {
                    local target="$1"
                    local extragccflags="$2"

                    eval local sources=\"\$${target}_SOURCES\"
                    eval local cppflags=\"\$${target}_CPPFLAGS\"

                    for dep in $sources; do
                        if [ "${dep%.c}" != "$dep" ]; then
                            ofile="${dep%.c}.o"
                            gcc -c "$dep" -o "$ofile" '"$archgccflags"' \
                                $cppflags $extragccflags 1>&2 || return $?
                            echo -n "$ofile "
                        fi
                    done
                }

                # fixlibadd:
                # Fix list of libraries ($1): replace lib<x>.la by -l<x>
                fixlibadd() {
                    for libdep in $*; do
                        if [ "${libdep%.la}" != "$libdep" ]; then
                            libdep="${libdep%.la}"
                            libdep="-l${libdep#lib}"
                        fi
                        echo -n "$libdep "
                    done
                }

                # buildlib: Build a library
                #  $1: library name
                #  $2: additional linker flags
                buildlib() {
                    local lib="$1"
                    local extraflags="$2"
                    local ofiles
                    # local eats the return status: separate the 2 statements
                    ofiles="`buildsources "${lib}_la" "-fPIC -DPIC"`"

                    eval local libadd=\"\$${lib}_la_LIBADD\"
                    eval local ldflags=\"\$${lib}_la_LDFLAGS\"

                    libadd="`fixlibadd $libadd`"

                    # Detect library version (e.g. 0.0.0)
                    local fullver="`echo -n "$ldflags" | \
                      sed -n '\''y/:/./; \
                                 s/.*-version-info \([0-9.]*\)$/\\1/p'\''`"
                    local shortver=""
                    # Get "short" library version (e.g. 0)
                    if [ -n "$fullver" ]; then
                        shortver=".${fullver%%.*}"
                        fullver=".$fullver"
                    fi
                    local fullso="$lib.so$fullver"
                    local shortso="$lib.so$shortver"
                    gcc -shared -fPIC -DPIC $ofiles $libadd -o "$fullso" \
                        '"$archgccflags"' $extraflags -Wl,-soname,"$shortso"
                    if [ -n "$fullver" ]; then
                        ln -sf "$fullso" "$shortso"
                        # Needed at link-time only
                        ln -sf "$shortso" "$lib.so"
                    fi
                }

                # buildexe: Build an executable file
                #  $1: executable file name
                #  $2: additional linker flags
                buildexe() {
                    local exe="$1"
                    local extraflags="$2"
                    local ofiles="`buildsources "$exe" ""`"

                    eval local ldadd=\"\$${exe}_LDADD\"
                    eval local ldflags=\"\$${exe}_LDFLAGS\"

                    ldadd="`fixlibadd $ldadd`"

                    gcc $ofiles $ldadd -o "$exe" '"$archgccflags"' $extraflags
                }

                buildlib libcras

                # Pass -rpath=$CRASLIBDIR to linker, so we do not need to add
                # the directory to ldconfig search path (some distributions do
                # not include /usr/local/lib in /etc/ld.so.conf).
                # We also need to add "-L." as we are not using .la files.
                extraflags="-Wl,-rpath='"$CRASLIBDIR"' -L."

                buildlib libasound_module_pcm_cras "$extraflags"
                buildlib libasound_module_ctl_cras "$extraflags"
                buildexe cras_test_client "$extraflags"
            '
        } | sh -s -e $SETOPTIONS

        echo "Installing CRAS..." 1>&2

        mkdir -p "$CRASBINDIR/" "$CRASLIBDIR/" "$ALSALIBDIR/"
        # Only install libcras.so.X.Y.Z
        /usr/bin/install -s libcras.so.*.* "$CRASLIBDIR/"
        # Generate symbolic link to libcras.so.X
        ldconfig -l "$CRASLIBDIR"/libcras.so.*.*
        /usr/bin/install -s libasound_module_pcm_cras.so "$ALSALIBDIR/"
        /usr/bin/install -s libasound_module_ctl_cras.so "$ALSALIBDIR/"
        /usr/bin/install -s cras_test_client "$CRASBINDIR/"
    ) # End compilation subshell
}

# On x86_64, the ALSA plugin needs to be compiled for both 32-bit and 64-bit
# to allow audio playback using 32-bit applications.
if [ "$ARCH" = 'amd64' ]; then
    build_cras 'i386'
fi

# Build CRAS for native architecture
build_cras

cat > /usr/share/alsa/alsa.conf.d/10-cras.conf <<EOF
pcm.cras {
    type cras
    hint {
        show on
        description "Chromium OS Audio Server"
    }
}
ctl.cras {
    type cras
}

# Default: route all audio through the CRAS plugin.
pcm.!default {
    type cras
    hint {
        show on
        description "Default ALSA Output (currently Chromium OS Audio Server)"
    }
}
ctl.!default {
    type cras
}
EOF

# Configure pulseaudio even if it is not installed (yet).
# We use ~/.config/pulse/default.pa for this purpose, but the main user may
# not have been created yet, so we add a script in /etc/profile.d to link
# ~/.config/pulse/default.pa to /etc/crouton/pulseaudio-default.pa.

paconfigdir='$HOME/.config/pulse'
# Old versions of pulseaudio use ~/.pulse/default.pa
if release -le quantal -le wheezy; then
    paconfigdir='$HOME/.pulse'
fi

profiledsh='/etc/profile.d/crouton-pulseaudio-cras.sh'
# Make sure symbolic link is setup on login
echo '#!/bin/sh

defaultpa="'"$paconfigdir"'/default.pa"
# Do not install if user is root, or $HOME does not exist
if [ "`id -u`" -ne 0 -a -d "$HOME" -a ! -e "$defaultpa" ]; then
    mkdir -p "'"$paconfigdir"'"
    ln -sfT /etc/crouton/pulseaudio-default.pa "$defaultpa"
fi' > "$profiledsh"

chmod 755 "$profiledsh"

TIPS="$TIPS
Audio from the chroot will now be forwarded to CRAS (Chromium OS audio server),
through an ALSA plugin.

Future Chromium OS upgrades may break compatibility with the installed version
of CRAS. Should this happen, simply update your chroot.
"
