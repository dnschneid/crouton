#!/bin/sh -e
# Copyright (c) 2014 The crouton Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
REQUIRES='core'
DESCRIPTION='Support audio playback via Chromium OS'\''s audio system.'
. "${TARGETSDIR:="$PWD"}/common"

### Append to prepare.sh:

# Fetch CRAS source

CRASBUILDTMP="`mktemp -d crouton-cras.XXXXXX --tmpdir=/tmp`"

addtrap "rm -rf --one-file-system '$CRASBUILDTMP'"

# ADHD_HEAD is normally autodetected, but it can be set manually using a custom
# target sourced before this one (used for automated testing)
# The custom target also needs to set CROS_VER_1
if [ -z "$ADHD_HEAD" ]; then
    # Chrome OS version (e.g. 4100.86.0)
    CROS_VER="`sed -n 's/^CHROMEOS_RELEASE_VERSION=//p' /var/host/lsb-release`"

    # Set CROS_VER_1 to the major version number (e.g. 4100), used later on to
    # selectively apply patches.
    CROS_VER_1="${CROS_VER%%.*}"

    cras_version="`cat /var/host/cras-version 2>/dev/null || true`"
    ADHD_HEAD="${cras_version##*-}"
    # Make sure ADHD_HEAD looks like a commit id
    if [ "${#ADHD_HEAD}" -ne 40 -o "${head%[^0-9a-f]*}" != "$head" ]; then
        echo "Empty or invalid cras-version (${cras_version})." 1>&2
        ADHD_HEAD=""
    fi
fi

# TODO: Remove autodetection code (not needed since build 6276)
if [ -z "$ADHD_HEAD" ]; then
    # Fetch list of branches from repository
    wget -O "$CRASBUILDTMP/adhd.refs" \
'https://chromium.googlesource.com/chromiumos/third_party/adhd/+refs/heads?format=TEXT'

    echo "Detecting CRAS branch (Chromium OS build $CROS_VER)..." 1>&2

    ADHD_HEAD="`awk '
        BEGIN {
            len = split("'"$CROS_VER"'", crosvers, ".")
            # Prepare a regex with each additional version component optional
            for (i = len; i >= 2; i--)
                verregex = "(\\\\." crosvers[i] verregex ")?"
            verregex = crosvers[1] verregex "($|\\\\.)"
        }
        # Release branches get the highest score
        $2 ~ "release-(R[^-]*-)?" crosvers[1] "($|\\\\.)" {
            print 99, $2
        }
        # Stabilize branches are scored based on how much of the version they match
        match($2, "stabilize-" verregex) {
            print RLENGTH, $2
        }
    ' "$CRASBUILDTMP/adhd.refs" | sort -V | tail -n 1 | cut -d' ' -f2`"

    # If no branch can be found, fall back on manifests. This should only be
    # needed on dev or canary channel, and this cannot be used on stable/beta,
    # as additional patches may be added to the git branch.
    if [ -z "$ADHD_HEAD" ]; then
        echo "No CRAS branch found, falling back on manifests..." 1>&2

        MANIFEST_GIT="https://chromium.googlesource.com/chromiumos/manifest-versions/+/master/chrome-LKGM-candidates"

        # Get the list of releases (e.g. 35). Only last 2 should be required.
        majorlist="`wget -O- "$MANIFEST_GIT/buildspecs" \
            | tr '>' '\n' | sed -n 's|^\([0-9]*\)/<.*|\1|p' \
            | sort -n -r | head -n 2`"

        for major in $majorlist; do
            # Get the latest manifest for the current build
            manifest="`wget -O- "$MANIFEST_GIT/buildspecs/$major" \
                 | sed -n 's/.*\('"$CROS_VER_1"'.0.0-rc[0-9]*.xml\).*/\1/p'`"

            if [ -n "$manifest" ]; then
                # Fetch git commit id
                ADHD_HEAD="`wget -O- \
                    "$MANIFEST_GIT/buildspecs/$major/$manifest?format=TEXT" \
                        | base64 -d \
| sed -n 's|.*path="src/third_party/adhd".* revision="\([0-9a-f]*\)".*|\1|p'`"
                break
            fi
        done
    fi

    if [ -z "$ADHD_HEAD" ]; then
        echo "Cannot figure out CRAS branch or commit ID." 1>&2
        exit 1
    fi
fi

echo "Fetching CRAS (branch $ADHD_HEAD)..." 1>&2

# Try to download the CRAS commit id first, and fall back on master if that is
# not found (see crbug.com/417820).

archive="$CRASBUILDTMP/adhd.tar.gz"
log="$CRASBUILDTMP/wget.log"
urlbase="https://chromium.googlesource.com/chromiumos/third_party/adhd/+archive"
( wget -O "$archive" "$urlbase/$ADHD_HEAD.tar.gz" 2>&1 \
                                    || echo "Error fetching CRAS" ) | tee "$log"
if tail -n 1 "$log" | grep -q "^Error"; then
    if grep -q "404 Not Found" "$log" 2>/dev/null; then
        echo "Branch not found, falling back on master (audio might not work)..." 1>&2
        ADHD_HEAD="master"
        wget -O "$archive" "$urlbase/$ADHD_HEAD.tar.gz"
    else
        # wget already printed an explicit error
        exit 1
    fi
fi

# Build CRAS ALSA plugin for the given architecture ($1)
# A blank parameter means we are building for the native architecture.
build_cras() {
    local cras_arch="$1"
    local pkgaffix=''
    local pkgdepextra=''
    local pkgconfigpath=''
    local archgccflags=''
    if [ -n "$cras_arch" ]; then
        if [ "${DISTROAKA:-"$DISTRO"}" = 'debian' ]; then
            pkgaffix=":$cras_arch"
            pkgdepextra='gcc-multilib'
            # Add foreign architecture, if necessary
            if ! dpkg --print-foreign-architectures | \
                                  grep -q "^$cras_arch$"; then
		echo "Adding foreign architecture $cras_arch to dpkg..." 1>&2
		dpkg --add-architecture "$cras_arch"
                apt-get update || true
            fi
            pkgconfigpath="/usr/lib/$cras_arch-linux-gnu/pkgconfig"
        elif [ "${DISTROAKA:-"$DISTRO"}" = 'arch' ]; then
            pkgaffix="lib32-"
            pkgconfigpath="/usr/lib32/pkgconfig"
        fi
        archgccflags='-m32'
    fi

    # Install CRAS dependencies
    install --minimal alsa-utils \
        arch=${pkgaffix}alsa-lib,libasound2$pkgaffix \
        arch=${pkgaffix}speex,libspeexdsp1$pkgaffix

    install --minimal --asdeps gcc $pkgdepextra arch=,libc6-dev$pkgaffix \
        pkg-config arch=,libspeexdsp-dev$pkgaffix

    # precise does not allow libasound2-dev and libasound2-dev:i386 to be
    # installed simultaneously
    if release -le precise && [ -n "$cras_arch" ]; then
        install --minimal --asdeps libasound2-dev
        # Manually link .so file
        libasoundso="/usr/lib/$cras_arch-linux-gnu/libasound.so"
        if [ ! -f "$libasoundso" ]; then
            addtrap "rm -f '$libasoundso' 2>/dev/null"
            ln -sfT libasound.so.2 "$libasoundso"
        fi
        ALSALIBDIR="/usr/lib/$cras_arch-linux-gnu/alsa-lib"
    else
        install --minimal --asdeps arch=,libasound2-dev$pkgaffix
        ALSALIBDIR="`PKG_CONFIG_PATH="$pkgconfigpath" \
                                pkg-config --variable=libdir alsa`/alsa-lib"
    fi

    # Start subshell for compilation
    (
        cd "$CRASBUILDTMP"

        # Make sure we start fresh
        rm -rf --one-file-system cras

        # -m prevents "time stamp is in the future" spam
        tar -xmf adhd.tar.gz cras/src

        cd cras/src

        # Create version file
        echo '#define VCSID "crouton-'"$ADHD_HEAD"'"' > common/cras_version.h

        install --minimal --asdeps patch

        # Fix volume control, see crbug.com/415661
        # Applied upstream in build 6283
        # FIXME: Remove this when 6283 has trickled down to stable
        if [ "$CROS_VER_1" -lt 6283 ]; then
            echo "Patching CRAS (volume control)..." 1>&2
            patch -p3 <<END
diff --git a/cras/src/alsa_plugin/ctl_cras.c b/cras/src/alsa_plugin/ctl_cras.c
index e9a0c47..e9549d9 100644
--- a/cras/src/alsa_plugin/ctl_cras.c
+++ b/cras/src/alsa_plugin/ctl_cras.c
@@ -161,21 +161,30 @@
 				 long *value)
 {
 	struct ctl_cras *cras = (struct ctl_cras *)ext_ctl->private_data;
+	cras_node_id_t node_id;
+	struct cras_ionode_info node;
 
 	switch (key) {
 	case CTL_CRAS_MIXER_PLAYBACK_SWITCH:
-		*value = !cras_client_get_system_muted(cras->client);
+		*value = !cras_client_get_user_muted(cras->client);
 		break;
 	case CTL_CRAS_MIXER_PLAYBACK_VOLUME:
-		*value = cras_client_get_system_volume(cras->client);
+		node_id = cras_client_get_selected_output(cras->client);
+		if (cras_client_get_node_by_id(cras->client, 0,
+							node_id, &node) < 0)
+			return -EIO;
+		*value = node.volume;
 		break;
 	case CTL_CRAS_MIXER_CAPTURE_SWITCH:
 		*value = !cras_client_get_system_capture_muted(cras->client);
 		break;
 	case CTL_CRAS_MIXER_CAPTURE_VOLUME:
-		*value = capture_gain_to_index(
-			cras->client,
-			cras_client_get_system_capture_gain(cras->client));
+		node_id = cras_client_get_selected_input(cras->client);
+		if (cras_client_get_node_by_id(cras->client, 1,
+							node_id, &node) < 0)
+			return -EIO;
+		*value = capture_gain_to_index(cras->client,
+						node.capture_gain);
 		break;
 	default:
 		return -EINVAL;
@@ -189,20 +198,24 @@
 				   long *value)
 {
 	struct ctl_cras *cras = (struct ctl_cras *)ext_ctl->private_data;
+	cras_node_id_t node_id;
 
 	switch (key) {
 	case CTL_CRAS_MIXER_PLAYBACK_SWITCH:
-		cras_client_set_system_mute(cras->client, !(*value));
+		cras_client_set_user_mute(cras->client, !(*value));
 		break;
 	case CTL_CRAS_MIXER_PLAYBACK_VOLUME:
-		cras_client_set_system_volume(cras->client, *value);
+		node_id = cras_client_get_selected_output(cras->client);
+		cras_client_set_node_volume(cras->client, node_id, *value);
 		break;
 	case CTL_CRAS_MIXER_CAPTURE_SWITCH:
 		cras_client_set_system_capture_mute(cras->client, !(*value));
 		break;
 	case CTL_CRAS_MIXER_CAPTURE_VOLUME:
-		cras_client_set_system_capture_gain(
+		node_id = cras_client_get_selected_input(cras->client);
+		cras_client_set_node_capture_gain(
 				cras->client,
+				node_id,
 				capture_index_to_gain(cras->client, *value));
 		break;
 	default:
END

        cat >>libcras/cras_client.h <<END
int cras_client_get_user_muted(struct cras_client *client);
int cras_client_get_node_by_id(const struct cras_client *client,
			       int input,
			       const cras_node_id_t node_id,
			       struct cras_ionode_info* node_info);
END

        cat >>libcras/cras_client.c <<END
int cras_client_get_user_muted(struct cras_client *client)
{
	if (!client || !client->server_state)
		return 0;
	return client->server_state->user_mute;
}

int cras_client_get_node_by_id(const struct cras_client *client,
			       int input,
			       const cras_node_id_t node_id,
			       struct cras_ionode_info* node_info)
{
	size_t ndevs, nnodes;
	struct cras_iodev_info *devs = NULL;
	struct cras_ionode_info *nodes = NULL;
	int rc = -EINVAL;
	unsigned i;

	if (!client || !node_info) {
		rc = -EINVAL;
		goto quit;
	}

	devs = (struct cras_iodev_info *)
			malloc(CRAS_MAX_IODEVS * sizeof(*devs));
	if (!devs) {
		rc = -ENOMEM;
		goto quit;
	}

	nodes = (struct cras_ionode_info *)
			malloc(CRAS_MAX_IONODES * sizeof(*nodes));
	if (!nodes) {
		rc = -ENOMEM;
		goto quit;
	}

	ndevs = CRAS_MAX_IODEVS;
	nnodes = CRAS_MAX_IONODES;
	if (input)
		rc = cras_client_get_input_devices(client, devs, nodes,
						&ndevs, &nnodes);
	else
		rc = cras_client_get_output_devices(client, devs, nodes,
						&ndevs, &nnodes);
	if (rc < 0)
		goto quit;

	rc = -ENOENT;
	for (i = 0; i < nnodes; i++) {
		if (node_id == cras_make_node_id(nodes[i].iodev_idx,
						 nodes[i].ionode_idx)) {
			memcpy(node_info, &nodes[i], sizeof(*node_info));
			rc = 0;
			break;
		}
	}

quit:
	free(devs);
	free(nodes);
	return rc;
}
END
        fi

        # Remove SBC dependency
        sed -e 's/#include <sbc.*//' -i common/cras_sbc_codec.h
        cat > common/cras_sbc_codec.c <<END
#include <stdint.h>
#include <stdlib.h>
#include "cras_audio_codec.h"

struct cras_audio_codec *cras_sbc_codec_create(uint8_t freq,
		   uint8_t mode, uint8_t subbands, uint8_t alloc,
		   uint8_t blocks, uint8_t bitpool) {
    abort();
}
void cras_sbc_codec_destroy(struct cras_audio_codec *codec) {
    abort();
}
END
        # Drop SBC constants
        sed -e 's/SBC_[A-Z0-9_]*/0/g' -i tests/cras_test_client.c

        # Directory to install CRAS library/binaries
        if [ -n "$cras_arch" ]; then
            CRASLIBDIR="/usr/local/$cras_arch-linux-gnu/lib"
            CRASBINDIR="/usr/local/$cras_arch-linux-gnu/bin"
        else
            CRASLIBDIR="/usr/local/lib"
            CRASBINDIR="/usr/local/bin"
        fi

        echo "Compiling CRAS (${cras_arch:-native})..." 1>&2
        # Convert Makefile.am to a shell script, and run it.
        {
            convert_automake

            echo '
                buildlib libcras

                # Pass -rpath=$CRASLIBDIR to linker, so we do not need to add
                # the directory to ldconfig search path (some distributions do
                # not include /usr/local/lib in /etc/ld.so.conf).
                # We also need to add "-L." as we are not using .la files.
                extraflags="-Wl,-rpath='"$CRASLIBDIR"' -L."

                buildlib libasound_module_pcm_cras "$extraflags"
                buildlib libasound_module_ctl_cras "$extraflags"
                buildexe cras_test_client "$extraflags"
            '
        } | sh -s -e $SETOPTIONS

        echo "Installing CRAS..." 1>&2

        mkdir -p "$CRASBINDIR/" "$CRASLIBDIR/" "$ALSALIBDIR/"
        # Only install libcras.so.X.Y.Z
        /usr/bin/install -s libcras.so.*.* "$CRASLIBDIR/"
        # Generate symbolic link to libcras.so.X
        ldconfig -l "$CRASLIBDIR"/libcras.so.*.*
        /usr/bin/install -s libasound_module_pcm_cras.so "$ALSALIBDIR/"
        /usr/bin/install -s libasound_module_ctl_cras.so "$ALSALIBDIR/"
        /usr/bin/install -s cras_test_client "$CRASBINDIR/"
    ) # End compilation subshell
}

# On x86_64, the ALSA plugin needs to be compiled for both 32-bit and 64-bit
# to allow audio playback using 32-bit applications.
if [ "${DISTROAKA:-"$DISTRO"}" = 'debian' ]; then
    if [ "$ARCH" = 'amd64' ]; then
        build_cras 'i386'
    fi
elif [ "${DISTROAKA:-"$DISTRO"}" = 'arch' ]; then
    # Only build 32-bit version if multilib repository is setup
    if [ "$ARCH" = "x86_64" ] && arch_multilib; then
        build_cras 'i386'
    fi
fi

# Build CRAS for native architecture
build_cras

cat > /usr/share/alsa/alsa.conf.d/10-cras.conf <<EOF
pcm.cras {
    type cras
    hint {
        show on
        description "Chromium OS Audio Server"
    }
}
ctl.cras {
    type cras
}

# Default: route all audio through the CRAS plugin.
pcm.!default {
    type cras
    hint {
        show on
        description "Default ALSA Output (currently Chromium OS Audio Server)"
    }
}
ctl.!default {
    type cras
}
EOF

# Configure pulseaudio even if it is not installed (yet).
# We use ~/.config/pulse/default.pa for this purpose, but the main user may
# not have been created yet, so we add a script in /etc/profile.d to link
# ~/.config/pulse/default.pa to /etc/crouton/pulseaudio-default.pa.

# Arch relies on systemd to stop pulseaudio when the session exits, and
# pulseaudio fails to start as it cannot find the appropriate systemd service.
# For this reason, we:
#  1. Cannot include the default /etc/pulse/default.pa
#  2. Need to provide blank daemon.conf & client.conf in ~/.config/pulse, to
#     make sure pulseaudio uses default settings (20 seconds timeout, and client
#     can start the server on demand)

paconfigdir='$HOME/.config/pulse'
# Old versions of pulseaudio use ~/.pulse/default.pa
if release -le quantal -le wheezy; then
    paconfigdir='$HOME/.pulse'
fi

# Default: include default configuration
pa_default_prepend='.include /etc/pulse/default.pa'
if [ "${DISTROAKA:-"$DISTRO"}" = 'arch' ]; then
    # Arch: do not include default configuration, but load native unix protocol
    # module, so that clients can connect
    pa_default_prepend='load-module module-native-protocol-unix'
fi

cat > /etc/crouton/pulseaudio-default.pa <<EOF
#!/usr/bin/pulseaudio -nF

$pa_default_prepend

# Forward audio to Chromium OS audio server
load-module module-alsa-sink device=cras sink_name=cras-sink
load-module module-alsa-source device=cras source_name=cras-source
set-default-sink cras-sink
set-default-source cras-source
EOF

touchconfigfiles=''
if [ "${DISTROAKA:-"$DISTRO"}" = 'arch' ]; then
    touchconfigfiles='y'
fi

profiledsh='/etc/profile.d/crouton-pulseaudio-cras.sh'
# Make sure symbolic link is setup on login
echo '#!/bin/sh

defaultpa="'"$paconfigdir"'/default.pa"
# Do not install if user is root, or $HOME does not exist
if [ "`id -u`" -ne 0 -a -d "$HOME" ]; then
    if [ ! -e "$defaultpa" ]; then
        mkdir -p "'"$paconfigdir"'"
        ln -sfT /etc/crouton/pulseaudio-default.pa "$defaultpa"
    fi
    # Create empty configuration files if necessary
    if [ -n "'"$touchconfigfiles"'" ]; then
        touch -a "'"$paconfigdir"'/daemon.conf" "'"$paconfigdir"'/client.conf"
    fi
fi' > "$profiledsh"

chmod 755 "$profiledsh"

TIPS="$TIPS
Audio from the chroot will now be forwarded to CRAS (Chromium OS audio server),
through an ALSA plugin.

Future Chromium OS upgrades may break compatibility with the installed version
of CRAS. Should this happen, simply update your chroot.
"
