#!/bin/sh -e
# Copyright (c) 2013 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# This file contains functions common to many of the scripts.
# The file is sourced when the scripts are run directly out of the repo, and
# directly inserted into the files when built into a bundle.

# Installs a script to a destination, statically inserting the below functions
# in this file if this file is sourced. If the file is a symlink, copies the
# symlink without modification.
# $1: the source script to process
# $2: the destination file or directory
# $3: optional additional commands to pass to sed (passed to -e)
installscript() {
    local src="$1" dst="$2"
    if [ -d "$dst" -o ! "${dst%/}" = "$dst" ]; then
        mkdir -p "$dst"
        dst="${dst%/}/${src##*/}"
    fi
    if [ -h "$src" ]; then
        cp -fPT "$src" "$dst"
        return
    fi
    thisfile="${INSTALLERDIR:-"`dirname "$0"`/../installer"}/functions"
    if [ ! -f "$thisfile" ]; then
        # This should never happen.
        error 1 "Unable to find common functions file."
    fi
    sed -e "${3:-;}" "$src" | awk '/^\. .*\/installer\/functions/ {
        system("'"awk 'ok; !ok && /^###/ {ok=1}' '$thisfile'"'");
        next
    }
    1' > "$dst"
}

### Everything after this line will be statically inserted into scripts.

# Exits the script with exit code $1, spitting out message $@ to stderr
error() {
    local ecode="$1"
    shift
    echo "$*" 1>&2
    exit "$ecode"
}

# Setup trap ($1) in case of interrupt or error.
# Traps are first disabled to avoid executing clean-up commands twice.
# In the case of interrupts, exit is called to avoid the script continuing.
# $1 must either be empty or end in a semicolon.
settrap() {
    trap "trap - INT HUP 0; $1 exit 2" INT HUP
    trap "trap - INT HUP 0; $1" 0
}

# Prepend a command to the existing $TRAP
addtrap() {
    OLDTRAP="$TRAP"
    TRAP="$1;$TRAP"
    settrap "$TRAP"
}

# Revert the last trap change
undotrap() {
    TRAP="$OLDTRAP"
    settrap "$TRAP"
}

# Large writes to slow devices (e.g. SD card or USB stick) can cause a task to
# be stuck for longer than 120 seconds, which triggers a kernel panic (and an
# immediate reboot). Instead of disabling the timeout altogether, we just make
# sure the kernel does not panic (this is the default configuration of a vanilla
# kernel). See crbug.com/260955 for details.
disablehungtask() {
    echo 0 > /proc/sys/kernel/hung_task_panic
}
